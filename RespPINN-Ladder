{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install pyDOE==0.3.7\n#!git clone https://github.com/maziarraissi/PINNs.git","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-12-26T19:21:49.083183Z","iopub.execute_input":"2021-12-26T19:21:49.083725Z","iopub.status.idle":"2021-12-26T19:22:00.969092Z","shell.execute_reply.started":"2021-12-26T19:21:49.083605Z","shell.execute_reply":"2021-12-26T19:22:00.968121Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting pyDOE==0.3.7\n  Downloading pyDOE-0.3.7.tar.gz (12 kB)\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: numpy in /opt/conda/lib/python3.7/site-packages (from pyDOE==0.3.7) (1.19.5)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.7/site-packages (from pyDOE==0.3.7) (1.7.2)\nBuilding wheels for collected packages: pyDOE\n  Building wheel for pyDOE (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pyDOE: filename=pyDOE-0.3.7-py3-none-any.whl size=18103 sha256=c1a2e44ac063cc5fdda609009575fbe1060aa3f0dc66fe795b1880b5cf5b7a29\n  Stored in directory: /root/.cache/pip/wheels/a9/f9/0c/788863d9b8d76904a402b147fda0868b041cfaf76ec7f32287\nSuccessfully built pyDOE\nInstalling collected packages: pyDOE\nSuccessfully installed pyDOE-0.3.7\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import sys\nimport torch\nfrom collections import OrderedDict\n\nfrom pyDOE import lhs\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io\nfrom scipy.interpolate import griddata\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport matplotlib.gridspec as gridspec\nimport time\n\nnp.random.seed(1234)","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:25:15.988476Z","iopub.execute_input":"2021-12-26T19:25:15.988819Z","iopub.status.idle":"2021-12-26T19:25:17.567835Z","shell.execute_reply.started":"2021-12-26T19:25:15.988780Z","shell.execute_reply":"2021-12-26T19:25:17.567059Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# CUDA support \nif torch.cuda.is_available():\n    device = torch.device('cuda')\nelse:\n    device = torch.device('cpu')","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:25:17.569156Z","iopub.execute_input":"2021-12-26T19:25:17.569555Z","iopub.status.idle":"2021-12-26T19:25:17.574121Z","shell.execute_reply.started":"2021-12-26T19:25:17.569524Z","shell.execute_reply":"2021-12-26T19:25:17.573315Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# the deep neural network\nclass DNN(torch.nn.Module):\n    def __init__(self, layers):\n        super(DNN, self).__init__()\n        \n        # parameters\n        self.depth = len(layers) - 1\n        \n        # set up layer order dict\n        self.activation = torch.nn.Tanh\n        \n        layer_list = list()\n        for i in range(self.depth - 1): \n            layer_list.append(\n                ('layer_%d' % i, torch.nn.Linear(layers[i], layers[i+1]))\n            )\n            layer_list.append(('activation_%d' % i, self.activation()))\n            \n        layer_list.append(\n            ('layer_%d' % (self.depth - 1), torch.nn.Linear(layers[-2], layers[-1]))\n        )\n        layerDict = OrderedDict(layer_list)\n        \n        # deploy layers\n        self.layers = torch.nn.Sequential(layerDict)\n        \n    def forward(self, x):\n        out = self.layers(x)\n        return out","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:25:21.608705Z","iopub.execute_input":"2021-12-26T19:25:21.608970Z","iopub.status.idle":"2021-12-26T19:25:21.618010Z","shell.execute_reply.started":"2021-12-26T19:25:21.608938Z","shell.execute_reply":"2021-12-26T19:25:21.617348Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"rho = 1.075\nmu = 18.17e-6\ngr = 0.0\ngz = 9.81\n\nclass PhysicsInformedNN():\n    def __init__(self, X_bc1, X_bc2, X_bc3, X_bc4, X_f, U_bc1, U_bc2, U_bc3, layers):  \n        \n        #self.v_bc = torch.tensor(U_bc1[:,0:1]).float().to(device)\n        #self.p_bc = torch.tensor(U_bc1[:,1:2]).float().to(device)\n        \n        self.X_bc1_r = torch.tensor(X_bc1[:, 0:1], requires_grad=True).float().to(device)\n        self.X_bc1_z = torch.tensor(X_bc1[:, 1:2], requires_grad=True).float().to(device)       \n        \n        self.U_bc1_v =  torch.tensor(U_bc2[:, 0:1], requires_grad=True).float().to(device)\n        \n        self.X_bc2_r = torch.tensor(X_bc2[:, 0:1], requires_grad=True).float().to(device)\n        self.X_bc2_z = torch.tensor(X_bc2[:, 1:2], requires_grad=True).float().to(device)\n        \n        self.U_bc2_u = torch.tensor(U_bc2[:, 0:1], requires_grad=True).float().to(device)\n        self.U_bc2_v = torch.tensor(U_bc2[:, 1:2], requires_grad=True).float().to(device)\n        \n        self.X_bc3_r = torch.tensor(X_bc3[:, 0:1], requires_grad=True).float().to(device)\n        self.X_bc3_z = torch.tensor(X_bc3[:, 1:2], requires_grad=True).float().to(device)\n        \n        self.U_bc3_u = torch.tensor(U_bc3[:, 0:1], requires_grad=True).float().to(device)\n        self.U_bc3_v = torch.tensor(U_bc3[:, 1:2], requires_grad=True).float().to(device)\n        \n        self.X_bc4_r = torch.tensor(X_bc4[:, 0:1], requires_grad=True).float().to(device)\n        self.X_bc4_z = torch.tensor(X_bc4[:, 1:2], requires_grad=True).float().to(device)\n        \n        self.X_f_r = torch.tensor(X_f[:, 0:1], requires_grad=True).float().to(device)\n        self.X_f_z = torch.tensor(X_f[:, 1:2], requires_grad=True).float().to(device)\n\n        self.layers = layers\n        \n        # deep neural networks\n        self.dnn = DNN(layers).to(device)\n        \n        # optimizers: using the same settings\n        self.optimizer = torch.optim.LBFGS(\n            self.dnn.parameters(), \n            lr=1, \n            max_iter=10e10, \n            max_eval=10e10, \n            history_size=1000,\n            tolerance_grad=1e-7, \n            tolerance_change=1.0 * np.finfo(float).eps,\n            line_search_fn=\"strong_wolfe\"       # can be \"strong_wolfe\"\n        )\n        \n        self.iter = 0\n                \n    def net_u(self, r, z):  \n        u = self.dnn(torch.cat([r, z], dim=1))\n        return u\n    \n    def net_f(self, r, z):\n        Sol = self.net_u(r,z)\n        u = Sol[:,0:1]\n        v = Sol[:,1:2]\n        p = Sol[:,2:]\n\n        u_r = torch.autograd.grad(u,r,grad_outputs=torch.ones_like(u),retain_graph=True,create_graph=True)[0]\n        u_z = torch.autograd.grad(u,z,grad_outputs=torch.ones_like(u),retain_graph=True,create_graph=True)[0]\n\n        v_r = torch.autograd.grad(v,r,grad_outputs=torch.ones_like(v),retain_graph=True,create_graph=True)[0]\n        v_z = torch.autograd.grad(v,z,grad_outputs=torch.ones_like(v),retain_graph=True,create_graph=True)[0]\n\n        p_r = torch.autograd.grad(p,r,grad_outputs=torch.ones_like(p),retain_graph=True,create_graph=True)[0]\n        p_z = torch.autograd.grad(p,z,grad_outputs=torch.ones_like(p),retain_graph=True,create_graph=True)[0]\n\n        u_zz = torch.autograd.grad(u_r,z,grad_outputs=torch.ones_like(u_z),retain_graph=True,create_graph=True)[0]\n        v_zz = torch.autograd.grad(v_z,z,grad_outputs=torch.ones_like(v_z),retain_graph=True,create_graph=True)[0]\n\n        ru_rr = torch.autograd.grad(r*u_r,r,grad_outputs=torch.ones_like(u_r),retain_graph=True,create_graph=True)[0]\n        rv_rr = torch.autograd.grad(r*v_r,r,grad_outputs=torch.ones_like(v_r),retain_graph=True,create_graph=True)[0]\n\n        v_rr = torch.autograd.grad(v_r,r,grad_outputs=torch.ones_like(v_r),retain_graph=True,create_graph=True)[0]\n        rv_r = torch.autograd.grad(r*v,r,grad_outputs=torch.ones_like(u),retain_graph=True,create_graph=True)[0]\n\n        f1 = rv_r + r*u_z\n        f2 = r**2*(v*v_r + u*v_z + p_r/rho) - mu*(r**2*(v_rr+v_zz) - v)\n        f3 = v*u_r + u*u_z + p_z/rho - mu*(v_rr+v_zz)\n        # f2 = r**2*rho*(u*u_r+ v*u_z) + r**2*p_r - r**2*rho*gr - mu*(r*ru_rr - u + r**2*u_zz)\n        # f3 = r*rho*(u*v_r + v*v_z) + r*p_z -r*rho*gz - mu*(rv_rr + r*v_zz) \n\n        return f1, f2, f3\n\n    def loss_func(self):\n        self.optimizer.zero_grad()\n        \n        Sol1 = self.net_u(self.X_bc1_r, self.X_bc1_z)\n        Sol2 = self.net_u(self.X_bc2_r, self.X_bc2_z)\n        Sol3 = self.net_u(self.X_bc3_r, self.X_bc3_z)\n        Sol4 = self.net_u(self.X_bc4_r, self.X_bc4_z)\n        \n        loss_bc1 = torch.mean((Sol1[:,1:2] - self.U_bc1_v)**2)\n        loss_bc2 = torch.mean((Sol2[:,0:1] - self.U_bc2_u)**2) + torch.mean((Sol2[:,1:2] - self.U_bc2_v)**2) \n        loss_bc3 = torch.mean((Sol3[:,0:1] - self.U_bc3_u)**2) + torch.mean((Sol3[:,1:2] - self.U_bc3_v)**2)\n        \n        BC1_u = Sol1[:,0:1]    \n        d = torch.autograd.grad(BC1_u,self.X_bc1_r,grad_outputs=torch.ones_like(BC1_u),retain_graph=True,create_graph=True)[0]\n        loss_bc1 += torch.mean(d**2)\n        \n        BC4_u = Sol4[:,0:1]\n        BC4_v = Sol4[:,1:2]\n        d = torch.autograd.grad(BC4_u,self.X_bc4_r,grad_outputs=torch.ones_like(BC4_u),retain_graph=True,create_graph=True)[0]\n        loss_bc4 = torch.mean(d**2)\n        d = torch.autograd.grad(BC4_v,self.X_bc4_z,grad_outputs=torch.ones_like(BC4_v),retain_graph=True,create_graph=True)[0]\n        loss_bc4 += torch.mean(d**2)\n    \n        f1, f2, f3 = self.net_f(self.X_f_r, self.X_f_z)\n        loss_f1 = torch.mean(f1**2)\n        loss_f2 = torch.mean(f2**2)\n        loss_f3 = torch.mean(f3**2)\n        \n        loss = (0.1*loss_bc1 + 0.7*loss_bc2 + 0.1*loss_bc3) + 0*loss_bc4 + 0.1*(loss_f1 + loss_f2 + loss_f3)\n        \n        loss.backward()\n        self.iter += 1\n        if self.iter % 100 == 0:\n            print(\"Iter:{},Loss:{}\".format(self.iter, loss))\n            print(\"Iter:{},Loss_bc1:{}\".format(self.iter, loss_bc1))\n            print(\"Iter:{},Loss_bc2:{}\".format(self.iter, loss_bc2))\n            print(\"Iter:{},Loss_bc3:{}\".format(self.iter, loss_bc3))\n            print(\"Iter:{},Loss_f1:{}\".format(self.iter, loss_f1))\n            print(\"Iter:{},Loss_f2:{}\".format(self.iter, loss_f2))\n            print(\"Iter:{},Loss_f3:{}\".format(self.iter, loss_f3))\n            print(\"-------------------------------------------\")\n        return loss        \n            \n    def train(self):\n        self.dnn.train()\n        self.optimizer.step(self.loss_func)\n            \n    def predict(self, X):\n        r = torch.tensor(X[:, 0:1], requires_grad=True).float().to(device)\n        z = torch.tensor(X[:, 1:2], requires_grad=True).float().to(device)\n\n        self.dnn.eval()\n        u = self.net_u(r,z)\n        f1, f2, f3 = self.net_f(r,z)\n        u = u.detach().cpu().numpy()\n        f1 = f1.detach().cpu().numpy()\n        f2 = f2.detach().cpu().numpy()\n        f3 = f3.detach().cpu().numpy()\n        return u, f1, f2, f3","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:31:17.785265Z","iopub.execute_input":"2021-12-26T19:31:17.785751Z","iopub.status.idle":"2021-12-26T19:31:17.832928Z","shell.execute_reply.started":"2021-12-26T19:31:17.785717Z","shell.execute_reply":"2021-12-26T19:31:17.832329Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nN_u = 40\nN_f = 10000\nlayers = [2, 20, 20, 20, 20, 20, 20, 20, 3]\n\nr = np.array([[t/6250] for t in range(51)])\nz = np.array([[t/1000] for t in range(101)])\n\nBC1 = np.array([[0.0,t/1000] for t in range(101)])\nBC2 = np.array([[0.008,t/1000] for t in range(101)])\nBC3 = np.array([[t/6250, 0.0] for t in range(51)])\nBC4 = np.array([[t/6250, 0.1] for t in range(51)])\n\nUC1 = np.array([[0.0]]*101)\nUC2 = np.array([[0.0,0.0]]*101)\nUC3 = np.array([[1.97,0.0]]*51)\n\nlb = np.array([0.0, 0.0])\nub = np.array([0.008, 0.1])\n\nXf_train = lb+ + (ub-lb)*lhs(2, N_f)\n\nidx = np.random.choice(BC1.shape[0], N_u, replace=False)\nBC1 = BC1[idx, :]\nUC1 = UC1[idx,:]\n\nidx = np.random.choice(BC2.shape[0], N_u, replace=False)\nBC2 = BC2[idx, :]\nUC2 = UC2[idx,:]\n\nidx = np.random.choice(BC3.shape[0], N_u, replace=False)\nBC3 = BC3[idx, :]\nUC3 = UC3[idx,:]\n\nidx = np.random.choice(BC4.shape[0], N_u, replace=False)\nBC4 = BC4[idx, :]\n\nmodel = PhysicsInformedNN(BC1, BC2, BC3, BC4, Xf_train, UC1, UC2, UC3, layers)\nmodel.train()","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:41:06.752336Z","iopub.execute_input":"2021-12-26T19:41:06.752994Z","iopub.status.idle":"2021-12-26T19:51:48.947815Z","shell.execute_reply.started":"2021-12-26T19:41:06.752961Z","shell.execute_reply":"2021-12-26T19:51:48.947040Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Iter:100,Loss:0.2884730100631714\nIter:100,Loss_bc1:0.0014568471815437078\nIter:100,Loss_bc2:0.055293042212724686\nIter:100,Loss_bc3:2.360145092010498\nIter:100,Loss_f1:0.0002275715523865074\nIter:100,Loss_f2:2.244524959773772e-13\nIter:100,Loss_f3:0.13584917783737183\n-------------------------------------------\nIter:200,Loss:0.06942662596702576\nIter:200,Loss_bc1:0.001409168355166912\nIter:200,Loss_bc2:0.03242168202996254\nIter:200,Loss_bc3:0.2730095684528351\nIter:200,Loss_f1:0.03129212185740471\nIter:200,Loss_f2:1.2587654474316423e-08\nIter:200,Loss_f3:0.16160361468791962\n-------------------------------------------\nIter:300,Loss:0.016318628564476967\nIter:300,Loss_bc1:0.0005274884751997888\nIter:300,Loss_bc2:0.006367749068886042\nIter:300,Loss_bc3:0.008633929304778576\nIter:300,Loss_f1:0.10343393683433533\nIter:300,Loss_f2:8.75733618954655e-09\nIter:300,Loss_f3:0.00601668655872345\n-------------------------------------------\nIter:400,Loss:0.015068023465573788\nIter:400,Loss_bc1:0.0002972203947138041\nIter:400,Loss_bc2:0.004703992046415806\nIter:400,Loss_bc3:0.008118415251374245\nIter:400,Loss_f1:0.10431628674268723\nIter:400,Loss_f2:1.3248552477307385e-08\nIter:400,Loss_f3:0.005020348355174065\n-------------------------------------------\nIter:500,Loss:0.012987400405108929\nIter:500,Loss_bc1:0.00018069952784571797\nIter:500,Loss_bc2:0.003961049485951662\nIter:500,Loss_bc3:0.005780770443379879\nIter:500,Loss_f1:0.09174138307571411\nIter:500,Loss_f2:6.215152836830384e-09\nIter:500,Loss_f3:0.004443791229277849\n-------------------------------------------\nIter:600,Loss:0.012419427745044231\nIter:600,Loss_bc1:0.00013945969112683088\nIter:600,Loss_bc2:0.004197185859084129\nIter:600,Loss_bc3:0.004544250201433897\nIter:600,Loss_f1:0.08766442537307739\nIter:600,Loss_f2:2.265013065994026e-09\nIter:600,Loss_f3:0.0024658457841724157\n-------------------------------------------\nIter:700,Loss:0.01115143857896328\nIter:700,Loss_bc1:0.0002181950694648549\nIter:700,Loss_bc2:0.0030587129294872284\nIter:700,Loss_bc3:0.0043845814652740955\nIter:700,Loss_f1:0.07846969366073608\nIter:700,Loss_f2:2.0209989237685022e-09\nIter:700,Loss_f3:0.007030922919511795\n-------------------------------------------\nIter:800,Loss:0.01046836283057928\nIter:800,Loss_bc1:0.00030870764749124646\nIter:800,Loss_bc2:0.0036017620004713535\nIter:800,Loss_bc3:0.003664713818579912\nIter:800,Loss_f1:0.06873923540115356\nIter:800,Loss_f2:8.978370935608382e-09\nIter:800,Loss_f3:0.006758632604032755\n-------------------------------------------\nIter:900,Loss:0.00958273932337761\nIter:900,Loss_bc1:0.0004508284037001431\nIter:900,Loss_bc2:0.0026877629570662975\nIter:900,Loss_bc3:0.003930514678359032\nIter:900,Loss_f1:0.06621962040662766\nIter:900,Loss_f2:2.838032742147334e-08\nIter:900,Loss_f3:0.006412058137357235\n-------------------------------------------\nIter:1000,Loss:0.009236390702426434\nIter:1000,Loss_bc1:0.00043206976260989904\nIter:1000,Loss_bc2:0.002800698159262538\nIter:1000,Loss_bc3:0.002667535562068224\nIter:1000,Loss_f1:0.06903962045907974\nIter:1000,Loss_f2:3.3605303428885236e-08\nIter:1000,Loss_f3:0.0006197552429512143\n-------------------------------------------\nIter:1100,Loss:0.008826719596982002\nIter:1100,Loss_bc1:0.00048190937377512455\nIter:1100,Loss_bc2:0.002212593099102378\nIter:1100,Loss_bc3:0.0031555683817714453\nIter:1100,Loss_f1:0.06651861220598221\nIter:1100,Loss_f2:5.341047071283356e-08\nIter:1100,Loss_f3:0.0026229009963572025\n-------------------------------------------\nIter:1200,Loss:0.008417884819209576\nIter:1200,Loss_bc1:0.0006258873618207872\nIter:1200,Loss_bc2:0.002023172564804554\nIter:1200,Loss_bc3:0.0025923135690391064\nIter:1200,Loss_f1:0.06423928588628769\nIter:1200,Loss_f2:1.0158551333461219e-07\nIter:1200,Loss_f3:0.0025590434670448303\n-------------------------------------------\nIter:1300,Loss:0.007921332493424416\nIter:1300,Loss_bc1:0.0008794695604592562\nIter:1300,Loss_bc2:0.0018336420180276036\nIter:1300,Loss_bc3:0.002247967291623354\nIter:1300,Loss_f1:0.06177041679620743\nIter:1300,Loss_f2:1.8461587103502097e-07\nIter:1300,Loss_f3:0.001479788334108889\n-------------------------------------------\nIter:1400,Loss:0.007479068823158741\nIter:1400,Loss_bc1:0.0010709890630096197\nIter:1400,Loss_bc2:0.0018281093798577785\nIter:1400,Loss_bc3:0.0022503933869302273\nIter:1400,Loss_f1:0.05706752836704254\nIter:1400,Loss_f2:2.6865814106713515e-07\nIter:1400,Loss_f3:0.0016047426033765078\n-------------------------------------------\nIter:1500,Loss:0.006832908373326063\nIter:1500,Loss_bc1:0.0015400339616462588\nIter:1500,Loss_bc2:0.0013982589589431882\nIter:1500,Loss_bc3:0.002229877980425954\nIter:1500,Loss_f1:0.05181281268596649\nIter:1500,Loss_f2:5.359848387342936e-07\nIter:1500,Loss_f3:0.0029580097179859877\n-------------------------------------------\nIter:1600,Loss:0.006223220843821764\nIter:1600,Loss_bc1:0.0022356989793479443\nIter:1600,Loss_bc2:0.0015616768505424261\nIter:1600,Loss_bc3:0.001695415936410427\nIter:1600,Loss_f1:0.04631917551159859\nIter:1600,Loss_f2:5.848341970704496e-07\nIter:1600,Loss_f3:0.0010495983297005296\n-------------------------------------------\nIter:1700,Loss:0.006028039380908012\nIter:1700,Loss_bc1:0.0019023946952074766\nIter:1700,Loss_bc2:0.0011091940104961395\nIter:1700,Loss_bc3:0.0014280773466452956\nIter:1700,Loss_f1:0.047780729830265045\nIter:1700,Loss_f2:6.538120373988932e-07\nIter:1700,Loss_f3:0.0014041746035218239\n-------------------------------------------\nIter:1800,Loss:0.0057789115235209465\nIter:1800,Loss_bc1:0.0021907808259129524\nIter:1800,Loss_bc2:0.0009597120806574821\nIter:1800,Loss_bc3:0.0014182929880917072\nIter:1800,Loss_f1:0.04543238505721092\nIter:1800,Loss_f2:8.283386137009074e-07\nIter:1800,Loss_f3:0.002028845949098468\n-------------------------------------------\nIter:1900,Loss:0.005416014231741428\nIter:1900,Loss_bc1:0.0029493707697838545\nIter:1900,Loss_bc2:0.0008398630889132619\nIter:1900,Loss_bc3:0.001172166084870696\nIter:1900,Loss_f1:0.0432090163230896\nIter:1900,Loss_f2:1.8287067860001116e-06\nIter:1900,Loss_f3:0.0009487145580351353\n-------------------------------------------\nIter:2000,Loss:0.005048791412264109\nIter:2000,Loss_bc1:0.003115318715572357\nIter:2000,Loss_bc2:0.0007512971642427146\nIter:2000,Loss_bc3:0.0011897218646481633\nIter:2000,Loss_f1:0.03946290165185928\nIter:2000,Loss_f2:2.069751644739881e-06\nIter:2000,Loss_f3:0.0014588214689865708\n-------------------------------------------\nIter:2100,Loss:0.00476057967171073\nIter:2100,Loss_bc1:0.003856196068227291\nIter:2100,Loss_bc2:0.00047083792742341757\nIter:2100,Loss_bc3:0.0009494861005805433\nIter:2100,Loss_f1:0.037856683135032654\nIter:2100,Loss_f2:3.458880200923886e-06\nIter:2100,Loss_f3:0.0016441068146377802\n-------------------------------------------\nIter:2200,Loss:0.004553433507680893\nIter:2200,Loss_bc1:0.005325544625520706\nIter:2200,Loss_bc2:0.0005134629900567234\nIter:2200,Loss_bc3:0.0007104561664164066\nIter:2200,Loss_f1:0.03376918286085129\nIter:2200,Loss_f2:4.604014975484461e-06\nIter:2200,Loss_f3:0.0021303032990545034\n-------------------------------------------\nIter:2300,Loss:0.004097877070307732\nIter:2300,Loss_bc1:0.005455121397972107\nIter:2300,Loss_bc2:0.0002995179675053805\nIter:2300,Loss_bc3:0.0006062535685487092\nIter:2300,Loss_f1:0.03064596839249134\nIter:2300,Loss_f2:5.572643658524612e-06\nIter:2300,Loss_f3:0.0021692276932299137\n-------------------------------------------\nIter:2400,Loss:0.0037009164225310087\nIter:2400,Loss_bc1:0.006378423888236284\nIter:2400,Loss_bc2:0.00017499830573797226\nIter:2400,Loss_bc3:0.00036329179420135915\nIter:2400,Loss_f1:0.027815314009785652\nIter:2400,Loss_f2:8.503727258357685e-06\nIter:2400,Loss_f3:0.001218642108142376\n-------------------------------------------\nIter:2500,Loss:0.003385166171938181\nIter:2500,Loss_bc1:0.0047533102333545685\nIter:2500,Loss_bc2:5.838929064339027e-05\nIter:2500,Loss_bc3:0.00039307441329583526\nIter:2500,Loss_f1:0.027696508914232254\nIter:2500,Loss_f2:1.3320916878001299e-05\nIter:2500,Loss_f3:0.0005867211148142815\n-------------------------------------------\nIter:2600,Loss:0.003193086013197899\nIter:2600,Loss_bc1:0.0036654812283813953\nIter:2600,Loss_bc2:3.7282119592418894e-05\nIter:2600,Loss_bc3:0.00014096021186560392\nIter:2600,Loss_f1:0.027274511754512787\nIter:2600,Loss_f2:2.0042711184942164e-05\nIter:2600,Loss_f3:0.0005688887322321534\n-------------------------------------------\nIter:2700,Loss:0.0031044611241668463\nIter:2700,Loss_bc1:0.003409438766539097\nIter:2700,Loss_bc2:3.126670344499871e-05\nIter:2700,Loss_bc3:0.0002823646937031299\nIter:2700,Loss_f1:0.026546837761998177\nIter:2700,Loss_f2:2.3690119633101858e-05\nIter:2700,Loss_f3:0.0005634119152091444\n-------------------------------------------\nIter:2800,Loss:0.0030742716044187546\nIter:2800,Loss_bc1:0.002707831561565399\nIter:2800,Loss_bc2:3.596956958062947e-05\nIter:2800,Loss_bc3:0.0002579781867098063\nIter:2800,Loss_f1:0.02684175781905651\nIter:2800,Loss_f2:2.8178119464428164e-05\nIter:2800,Loss_f3:0.0006551842670887709\n-------------------------------------------\nIter:2900,Loss:0.0030387751758098602\nIter:2900,Loss_bc1:0.0030872009228914976\nIter:2900,Loss_bc2:8.129370689857751e-05\nIter:2900,Loss_bc3:0.0002212689141742885\nIter:2900,Loss_f1:0.02599428966641426\nIter:2900,Loss_f2:2.5913972422131337e-05\nIter:2900,Loss_f3:0.0004900231142528355\n-------------------------------------------\nIter:3000,Loss:0.002991911256685853\nIter:3000,Loss_bc1:0.002467879094183445\nIter:3000,Loss_bc2:8.479366806568578e-05\nIter:3000,Loss_bc3:0.00023694621631875634\nIter:3000,Loss_f1:0.026280667632818222\nIter:3000,Loss_f2:2.8043197744409554e-05\nIter:3000,Loss_f3:0.0003120188775938004\n-------------------------------------------\nIter:3100,Loss:0.0029787737876176834\nIter:3100,Loss_bc1:0.002537029329687357\nIter:3100,Loss_bc2:8.915177750168368e-05\nIter:3100,Loss_bc3:0.00024980006855912507\nIter:3100,Loss_f1:0.026136284694075584\nIter:3100,Loss_f2:2.7201664124731906e-05\nIter:3100,Loss_f3:0.00021335773635655642\n-------------------------------------------\nIter:3200,Loss:0.0029652705416083336\nIter:3200,Loss_bc1:0.002485711360350251\nIter:3200,Loss_bc2:0.00011623945465544239\nIter:3200,Loss_bc3:0.00026234553661197424\nIter:3200,Loss_f1:0.02568247728049755\nIter:3200,Loss_f2:2.562837653385941e-05\nIter:3200,Loss_f3:0.00038286764174699783\n-------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"X = np.array([[r/6250,z/10000] for r in range(51) for z in range(1001)])\nU,_,_,_ = model.predict(X)","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:52:22.401145Z","iopub.execute_input":"2021-12-26T19:52:22.401446Z","iopub.status.idle":"2021-12-26T19:52:23.807012Z","shell.execute_reply.started":"2021-12-26T19:52:22.401419Z","shell.execute_reply":"2021-12-26T19:52:23.806364Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"X = X.reshape(51,1001,2)\nU = U.reshape(51,1001,3)","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:52:30.733659Z","iopub.execute_input":"2021-12-26T19:52:30.734193Z","iopub.status.idle":"2021-12-26T19:52:30.737638Z","shell.execute_reply.started":"2021-12-26T19:52:30.734158Z","shell.execute_reply":"2021-12-26T19:52:30.736941Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"UC3[:50,0]","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:52:34.762983Z","iopub.execute_input":"2021-12-26T19:52:34.763316Z","iopub.status.idle":"2021-12-26T19:52:34.769909Z","shell.execute_reply.started":"2021-12-26T19:52:34.763281Z","shell.execute_reply":"2021-12-26T19:52:34.769082Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"array([1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97,\n       1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97,\n       1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97,\n       1.97, 1.97, 1.97, 1.97, 1.97, 1.97, 1.97])"},"metadata":{}}]},{"cell_type":"code","source":"U[0,:,0][:50]","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:52:42.524572Z","iopub.execute_input":"2021-12-26T19:52:42.525831Z","iopub.status.idle":"2021-12-26T19:52:42.538101Z","shell.execute_reply.started":"2021-12-26T19:52:42.525755Z","shell.execute_reply":"2021-12-26T19:52:42.537408Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"array([1.9542053 , 1.9471853 , 1.9387    , 1.9286745 , 1.9170678 ,\n       1.9038637 , 1.8890736 , 1.8727286 , 1.8548787 , 1.8355877 ,\n       1.814924  , 1.7929685 , 1.7698    , 1.7454998 , 1.7201498 ,\n       1.6938365 , 1.6666391 , 1.6386383 , 1.6099126 , 1.5805414 ,\n       1.5505927 , 1.5201452 , 1.4892609 , 1.4580069 , 1.426445  ,\n       1.3946328 , 1.362628  , 1.3304801 , 1.2982352 , 1.2659423 ,\n       1.233638  , 1.2013652 , 1.1691592 , 1.1370485 , 1.1050754 ,\n       1.073267  , 1.0416493 , 1.0102608 , 0.97912383, 0.948272  ,\n       0.91773486, 0.88754344, 0.8577256 , 0.8283136 , 0.799335  ,\n       0.7708163 , 0.7427912 , 0.71528006, 0.68830705, 0.6618972 ],\n      dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nax = sns.heatmap(U[:,:,0])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:53:37.089562Z","iopub.execute_input":"2021-12-26T19:53:37.089826Z","iopub.status.idle":"2021-12-26T19:53:37.617577Z","shell.execute_reply.started":"2021-12-26T19:53:37.089800Z","shell.execute_reply":"2021-12-26T19:53:37.616776Z"},"trusted":true},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"ax = sns.heatmap(U[:,:,1])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:53:49.890500Z","iopub.execute_input":"2021-12-26T19:53:49.891033Z","iopub.status.idle":"2021-12-26T19:53:50.411686Z","shell.execute_reply.started":"2021-12-26T19:53:49.890987Z","shell.execute_reply":"2021-12-26T19:53:50.410958Z"},"trusted":true},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"ax = sns.heatmap(U[:,:,2])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2021-12-26T19:54:04.778866Z","iopub.execute_input":"2021-12-26T19:54:04.779414Z","iopub.status.idle":"2021-12-26T19:54:05.489967Z","shell.execute_reply.started":"2021-12-26T19:54:04.779373Z","shell.execute_reply":"2021-12-26T19:54:05.489106Z"},"trusted":true},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
